{"version":3,"sources":["Memegenerator.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Memegenerator","useState","allMemeImgs","meme","setmeme","topText","bottomText","input","setInputs","memeimg","setmemeimg","useEffect","fetch","then","response","json","memes","data","handleInputChange","event","inputs","target","name","value","handleSubmit","e","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","type","placeholder","onChange","onClick","src","alt","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA0EeA,MAvEf,WAA0B,IAAD,EACAC,mBAAS,CAACC,YAAY,KADtB,mBACjBC,EADiB,KACXC,EADW,OAGDH,mBAAS,CAC7BI,QAAQ,GACRC,WAAW,KALU,mBAGlBC,EAHkB,KAGZC,EAHY,OAQEP,mBAAS,iCARX,mBAQlBQ,EARkB,KAQVC,EARU,KAUrBC,qBAAU,WAERC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MAEPZ,EAAQ,CAACF,YAAYc,UASzB,IAAME,EAAoB,SAACC,GAEzBX,GAAU,SAAAY,GAAM,kCAASA,GAAT,kBAAkBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,YAG9DC,EAAa,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW3B,EAAKD,YAAY6B,QACtDC,EAAc7B,EAAKD,YAAYyB,GAASM,IAC/CvB,EAAWsB,IAMlB,OACI,gCACQ,uBAAME,UAAU,YAAhB,UACI,uBACIC,KAAK,OACLb,KAAK,UACLc,YAAY,WACZb,MAAOhB,EAAMF,QACbgC,SAAUnB,IAEd,uBACIiB,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAOhB,EAAMD,WACb+B,SAAUnB,IAGd,wBAAQoB,QAASd,EAAjB,yBAGJ,sBAAKU,UAAU,OAAf,UACI,qBAAKK,IAAK9B,EAAS6B,QAASd,EAAcgB,IAAI,KAC9C,oBAAIN,UAAU,MAAd,SAAqB3B,EAAMF,UAC3B,oBAAI6B,UAAU,SAAd,SAAwB3B,EAAMD,oBCtDnCmC,MAZf,WACI,OACI,mCACI,qBACIF,IAAI,yGACJC,IAAI,aAER,mDCMGE,MAVf,WACE,OACE,gCACE,cAAC,EAAD,IACC,cAAC,EAAD,QCGQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.19d27183.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\n\r\nfunction Memegenerator() {\r\nconst  [meme, setmeme] = useState({allMemeImgs:[]})\r\n\r\nconst [input,setInputs]=useState({\r\n    topText:\"\",\r\n    bottomText:\"\",\r\n  \r\n})\r\nconst [memeimg,setmemeimg]=useState(\"http://i.imgflip.com/1bij.jpg\")\r\n\r\n    useEffect(()=>{\r\n   \r\n      fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n          const {memes} = response.data\r\n         \r\n          setmeme({allMemeImgs:memes}) \r\n         \r\n\r\n        \r\n      })\r\n         \r\n    \r\n      })\r\n\r\n      const handleInputChange = (event) => {\r\n    \r\n        setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\r\n        }\r\n\r\n       const handleSubmit=(e)=> {\r\n            e.preventDefault()\r\n            const randNum = Math.floor(Math.random() * meme.allMemeImgs.length)\r\n            const randMemeImg = meme.allMemeImgs[randNum].url\r\n           setmemeimg(randMemeImg)\r\n        }\r\n      \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n                <form className=\"meme-form\">\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={input.topText}\r\n                        onChange={handleInputChange}\r\n                    /> \r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={input.bottomText}\r\n                        onChange={handleInputChange}\r\n                    /> \r\n                \r\n                    <button onClick={handleSubmit}>Generate</button>\r\n                  \r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={memeimg} onClick={handleSubmit} alt=\"\" />\r\n                    <h2 className=\"top\">{input.topText}</h2>\r\n                    <h2 className=\"bottom\">{input.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Memegenerator","import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                src=\"https://www.clipartmax.com/png/full/64-647127_smiley-lol-emoticon-laughter-clip-art-laughing-emoji.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","\nimport './App.css';\nimport Memegenerator from './Memegenerator';\nimport Header from './Header';\n\nfunction App() {\n  return (\n    <div> \n      <Header/>\n       <Memegenerator/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}